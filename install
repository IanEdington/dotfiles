#!/usr/bin/env bash
# Programs are meant to be read. If you can't read this script let me know. If you have a suggestion, send a pull request, or create an issue. I love collaborating.

# install or update from git repo
dotfiles::install_from_github () {
    local package_dir github_repo starting_dir
    github_repo=$1
    package_dir=$2
    starting_dir=$PWD

    if [[ -e $package_dir ]]; then
        cd $package_dir
        git pull && git submodule update --init --remote --recursive
    else
        echo "clone into " $package_dir
        git clone --depth 1 $github_repo $package_dir
        cd $package_dir
        git submodule update --init --remote --recursive
    fi

    cd $starting_dir
}

# returns 1 if $array contains a $string
array_contains () { 
    local array="$1[@]"
    local seeking=$2
    local in=1
    for element in "${!array}"; do
        if [[ $element == $seeking ]]; then
            in=0
            break
        fi
    done
    return $in
}

# dotfiles::backup_func () {
    # Check that a backup folder exists
    # if not create a backup folder
    # Check if the offending file already exists in the backup folder
    # if it does
    # move the offending file into the backup folder
    # remove the file in question
    # Add the ~ relative path to the backed up files list
# }

dotfiles::symlink_files () {
    local symlink_to symlink_from
    symlink_to=$1
    symlink_from=$2

    # TODO check if link already exists

    echo "linking:" "$symlink_from" "->" "$symlink_to"

    if [ -h "$symlink_from" ]; then
        rm "$symlink_from"
    elif [ -e "$symlink_from" ]; then
        echo "$symlink_from" " exists and is not a symlink! aboart aboart!"
        echo "we aren't ready to handle this"
        return
        # TODO use the backup_func
    elif [[ ! -e "$(dirname "$symlink_from")" ]]; then
        mkdir -p "$(dirname "$symlink_from")"
    fi

    ln -s "$symlink_to" "$symlink_from"
}

dotfiles::uname () {
    case "$(uname -s)" in
        Darwin)
            echo 'mac'
            ;;
        Linux)
            echo 'linux'
            ;;
        CYGWIN*|MINGW32*|MSYS*)
            echo 'windows'
            ;;
        *)
            echo 'other'
            ;;
    esac
}

# Ask for the administrator password upfront
sudo -v

# Keep-alive: update existing `sudo` time stamp until `.macos` has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

# ________
# Pre recs

OS=`dotfiles::uname`
# full xcode installation is required
if [$OS == 'mac']; then
    xcodebuild -version
    if [[ $? != 0 ]] ; then
        echo "you need to install xcode from the app store"
        # exit
    fi
    # so is xcode command line tools
    xcode-select --install > /dev/null
    sudo xcodebuild -license accept
fi

# ______________________
# Starting the fun stuff

# ref: http://stackoverflow.com/a/246128/4301584
DOTFILES_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd -P )"
echo "dotfiles root " $DOTFILES_ROOT

# in case people want to use comands in their scripts
# Add bin/ to path # Add homebrew bin to path
export PATH=/usr/local/sbin:$HOME/.dotfiles/bin:$PATH


# Symlink the current folder to .dotfiles
dotfiles::symlink_files $DOTFILES_ROOT ~/.dotfiles;
cd ~/.dotfiles

if [$OS == 'mac']; then
    # If homebrew exists update if not install
    which -s brew
    if [[ $? == 0 ]] ; then
        brew update
    else
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi

    brew tap homebrew/bundle
    brew tap homebrew/completions
    brew tap caskroom/cask
    brew install mas

    # concatenate all Brewfiles and make sure they're installed
    Brewfile_path=~/.dotfiles/.tmp/Brewfile
    /bin/rm $Brewfile_path
    for Brewfile in Brewfile */Brewfile */*/Brewfile ; do
        cat $Brewfile >> $Brewfile_path
    done
    brew bundle -v --file=$Brewfile_path

    brew bundle dump --file=${Brewfile_path}dump-`/bin/date -ju "+%Y-%m-%d-%H%M%S"`

    brew upgrade
    brew cleanup
    brew cask cleanup
    brew prune
    brew doctor
fi

# link a few global files
dotfiles::symlink_files ~/.dotfiles/inputrc ~/.inputrc

# Run install scripts
# for each folder in dotfiles/
for dir in */ ; do
    echo Installing the $dir directory:
    cd $dir;

    if [ -f install ]; then
        source ./install
    fi

    # dotfiles::symlink_files for each *.symlink
    # append .zsh files to .zsh
    # append path.zsh files to zsh $PATH
    # append *completion.zsh to
    # append .bash files to .profile
    # append path.bash files to bash $PATH
    cd ~/.dotfiles
done
